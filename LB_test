
from selenium import webdriver
import time
import unittest
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.common.by import By
# from __builtin__ import classmethod
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support.select import Select
# import os, Conf_Reader
# from selenium.webdriver.common.action_chains import ActionChains
# from selenium.webdriver.support import expected_conditions as EC


class LBTest(unittest.TestCase):
    @classmethod
    def setupclass(cls):
        cls.driver = webdriver.Chrome()
        cls.driver.maximize_window()
        cls.base_url = "http://legalbarriers.dev.lin2.panth.com/"
        # cls.driver.get(cls.base_url + "user")

        cls.modal_body_xpath = "//div[contains(@class, 'modal-body')]"
        cls.modal_body_name_xpath = "//input[contains(@id, 'name')][contains(@class, 'form-field')]"
        cls.modal_body_org_xpath = "//input[contains(@id, 'organization')][contains(@class, 'form-field')]"
        cls.modal_body_email_xpath = "//input[contains(@id, 'email')][contains(@class, 'form-field')]"
        cls.modal_body_submit_xpath = "//input[contains(@id, 'submit_button')][contains(@type, 'submit')]"

    def data_input(self):
        driver = self.driver
        driver.get(self.base_url)

        driver.find_element_by_xpath("//input[contains(@id, 'name')][contains(@class, 'form-field')]").clear()
        driver.find_element_by_xpath("//input[contains(@id, 'name')][contains(@class, 'form-field')]").send_keys("TestName")
        driver.find_element_by_xpath("//input[contains(@id, 'organization')][contains(@class, 'form-field')]").clear()
        driver.find_element_by_xpath("//input[contains(@id, 'organization')][contains(@class, 'form-field')]").send_keys("TestOrganization")
        driver.find_element_by_xpath("//input[contains(@id, 'email')][contains(@class, 'form-field')]").clear()
        driver.find_element_by_xpath("//input[contains(@id, 'email')][contains(@class, 'form-field')]").send_keys("TestEmai@testemail.com")
        driver.find_element_by_xpath("//input[contains(@id, 'submit_button')][contains(@type, 'submit')]").click()
        print("Data Submitted")

    def cookie_delete(self):
        time.sleep(3)
        self.driver.delete_all_cookies()

    def call_all(self):
        self.setupclass()
        self.data_input()

    def run_loop(self):
        for _ in range(0,20):
            self.call_all()

    @classmethod
    def teardown(cls):
        # Close the browser window
        cls.driver.quit()
        print("Done")

    if __name__ == '__main__':
        unittest.main()






        # modal_body_name_xpath.send_keys(self.credentials.admin_email)
        # pass_field.clear()
        # pass_field.send_keys(self.credentials.admin_pass)
        # login_button.click()



# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.common.keys import Keys
# from selenium.webdriver.support.ui import Select
# # from selenium.common.exceptions import NoSuchElementException
# # from selenium.common.exceptions import NoAlertPresentException
# import unittest, time, re
#
#
# class LBTest(unittest.TestCase):
#     def setUp(self):
#         self.driver = webdriver.Chrome()
#         #self.driver.implicitly_wait(30)
#         self.base_url = "http://legalbarriers.dev.lin2.panth.com/"
#         self.verificationErrors = []
#         self.accept_next_alert = True
#
#     def test_l_b(self):
#         driver = self.driver
#         driver.find_element_by_id("name").clear()
#         driver.find_element_by_id("name").send_keys("Test")
#         driver.find_element_by_id("organization").clear()
#         driver.find_element_by_id("organization").send_keys("Tester")
#         driver.find_element_by_id("email").clear()
#         driver.find_element_by_id("email").send_keys("test@abc.com")
#         driver.find_element_by_id("submit_button").click()
#
#     def is_element_present(self, how, what):
#         try:
#             self.driver.find_element(by=how, value=what)
#         except NoSuchElementException as e:
#             return False
#         return True
#
#     def is_alert_present(self):
#         try:
#             self.driver.switch_to_alert()
#         except NoAlertPresentException as e:
#             return False
#         return True
#
#     def close_alert_and_get_its_text(self):
#         try:
#             alert = self.driver.switch_to_alert()
#             alert_text = alert.text
#             if self.accept_next_alert:
#                 alert.accept()
#             else:
#                 alert.dismiss()
#             return alert_text
#         finally:
#             self.accept_next_alert = True
#
#     def tearDown(self):
#         self.driver.quit()
#         self.assertEqual([], self.verificationErrors)
#
#
